cc.Class({
    extends: cc.Component,

    properties: {

    },

    onLoad() {
        //正则表达式---Regular Expression，是一种文本模式，包括普通字符（如：a-z之间的字母）和特殊字符（称为元字符）
        //模式描述在搜索文本时要匹配的一个或多个字符串
        //正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配

        //1---语法
        //1.1---普通字符---没有显式指定为元字符的所有可打印和不打印字符
        //包括所有大写和小写字母、所有数字、所有标点符号、一些其他符号
        //1.2---非打印字符也可以是正则表达式的组成部分
        //非打印字符的转义序列
        //如：\n---匹配一个换行符；\r---匹配一个回车符
        //1.3---特殊字符（元字符）
        //如果要匹配特殊字符，必须使字符"转义"---即将反斜杠符\放在它们前面
        //\---将下一个字符标记为特殊字符、或转义字符、或向后引用、或八进制转义符；如\n匹配一个换行符
        //------定位符---用来描述字符串或单词的边界；不能将限定符与定位符一起使用
        //^---匹配输入字符串的开始位置；如果设置了RegExp对象的Multiline属性，则^也匹配'\n'或'\r'之后的位置             
        //$---匹配输入字符串的结尾位置；如果设置了RegExp对象的Multiline属性，则$也匹配'\n'或'\r'之前的位置
        //\b---匹配一个单词边界，及单词和空格间的位置；例如：er\b可以匹配never中的er，但不能匹配 verb中的er
        //\B---匹配非单词边界；er\B能匹配verb中的er，但不能匹配never中的er
        //------定位符
        //------限定符---用来指定正则表达式的一个给定组件必须出现多少次才能满足匹配
        //*---匹配前面的子表达0次或多次；例如：zo*能匹配"z"以及""zoo"；*等价于{0,}
        //+---匹配前面的子表达1次或多次；例如：zo+能匹配"zo"以及""zoo"，但不能匹配"z；+等价于{1,}
        //?---匹配前面的子表达0次或1次，或指明一个非贪婪限定符；例如：do(es)?能匹配"do"、"does"中的"does"、"doxy"、"do"；?等价于{0,1}
        //{n}---n是一个非负整数，匹配确定的n次，例如：o{2}不能匹配"Bob"中o，但能匹配"food"中的2个o
        //{n,}---n是一个非负整数，至少匹配n次，例如：o{2}不能匹配"Bob"中o，但能匹配"foooooood"中的所有个o
        //{n,m}---n、m均是一个非负整数，其中n<=m；最少匹配n次，最多匹配m次；例如：o{1,3}将匹配"foooood"中前3个o；逗号和nm之间不能有空格
        //?---当?紧跟在任何一个其他限定符（*，+，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的
        //非贪婪模式---尽可能少的匹配所搜索的字符串
        //默认的贪婪模式---尽可能多的匹配所搜索的字符串
        //------限定符
        //.---匹配除了换行符\n之外的任何单字符
        //[.]---只会匹配.字符
        //(pattern)---匹配pattern并获取这一匹配，所获取的匹配可以从产生的Matches集合得到
        //x|y---匹配x或y；例如：(z|f)ood---匹配zood或food
        //[^指定字符串]---除指定字符串以外的其他字符串
        //[xyz]---字符集合；匹配所包含的任意一个字符；例如：[abc]---匹配plain中的a
        //[^xyz]---负值字符集合；匹配未包含的任意字符；例如：[^abc]---匹配plain中的p、l、i、n
        //[a-z]---字符范围；匹配指定范围内的任意字符；例如：[a-z]---匹配a-z范围内的任意小写字母字符
        //[^a-z]---负值字符范围；匹配任何不在指定范围内的任意字符；例如：[^a-z]---匹配任何不在a-z范围内的任意字符

        //2---运算符优先级
        //正则表达式从左到右进行计算，并遵循优先级顺序
        //从最高到最低
        //\---转义符
        //()，[]---圆括号和方括号
        //*，+，?，{n}，{n,}，{n,m}---限定符
        //^，$，\任何元字符，任何字符---定位点和序列，即位置和顺序
        //|---替换，"或"操作

        //3---用法
        //正则表达式描述了一种字符串匹配的模式---数据验证，例如：可以测试输入字符串，以查看字符串内是否出现电话号码模式或信用卡号码模式
        //可以用来检查一个串是否含有某种子串
        //可以将匹配的子串替换---可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它
        //可以从某个串中取出符合某个条件的子串---可以查找文档内或输入域内特定文本

        //4---示例
        //4.1---简单表达式---在搜索字符串中匹配其本身的单个普通字符
        //---/a/---匹配a
        //可以将许多单字符组合起来以形成大的表达式
        //---/a7/---匹配a7
        var str1 = 'bam7';
        var patt1 = /a/;
        var patt12 = /a7/;
        var patt13 = /am/;
        var patt14 = /ma/;
        console.log('4.1.1---' + str1.match(patt1)); //a
        console.log('4.1.2---' + str1.match(patt12)); //null
        console.log('4.1.2---' + str1.match(patt13)); //am
        console.log('4.1.2---' + str1.match(patt14)); //null
        //4.2---字符匹配
        //句号.---匹配字符串中的各种打印或非打印字符，除了换行符\n
        //---/a.c/---匹配aac、abc、acc、a1c等
        //4.3---中括号表达式---创建匹配字符组的一个列表，在[]内放置一个或更多单个字符
        //与在任何别的位置一样，普通字符在中括号内表示其本身，即它在输入文本中匹配一次其本身
        //括在中括号表达式中的字符只匹配处于正则表达式中该位置的单个字符
        var str31 = 'abc1';
        var str32 = 'abc2';
        var str33 = 'abc3';
        var str34 = 'abc12';
        var str35 = 'abc21';
        var patten3 = /abc[12345]/;
        //等价var patten31 = /abc[1-5]/;
        console.log('4.3.1---' + str31.match(patten3)); //abc1
        console.log('4.3.2---' + str32.match(patten3)); //abc2
        console.log('4.3.3---' + str33.match(patten3)); //abc3
        console.log('4.3.4---' + str34.match(patten3)); //abc1
        console.log('4.3.5---' + str35.match(patten3)); //abc2
        //4.4---替换和分组
        //替换使用|字符---来允许在2个或多个替换选项之间进行选择
        //4.5---从字符串str中提取数字部分的内容（匹配一次）
        var str5 = '12abc123def';
        var patt5 = /[0-9]+/;
        console.log('4.5---' + str5.match(patt5)); //12
        //4.6---匹配以数字开头，并以abc结尾的字符串
        var str6 = '1abc';
        //^---为匹配输入字符串的开始位置
        //[0-9]+---匹配多个数字
        //[0-9]---匹配单个数字
        //+---匹配一个或多个
        //abc$---匹配字母abc并以abc结尾
        //$---为匹配输入字符串的结束位置
        var patt6 = /^[0-9]+abc$/;
        console.log('4.6---' + str6.match(patt6)); //1abc    

    },

    // start () {

    // },

    // update (dt) {},
});